AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 Scheduler - Automatically start/stop test and dev instances based on tags with cost reporting'

Parameters:
  EmailAddress:
    Type: String
    Description: Email address to receive notifications
    
  TargetEnvironments:
    Type: CommaDelimitedList
    Default: test,dev
    Description: Comma-separated list of environment tags to target

Resources:
  # SNS Topic for notifications
  EC2SchedulerTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: EC2-Scheduler-Notifications
      Subscription:
        - Protocol: email
          Endpoint: !Ref EmailAddress
  
  # IAM Role for Lambda
  EC2SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2SchedulerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:StartInstances
                  - ec2:StopInstances
                Resource: '*'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref EC2SchedulerTopic
              - Effect: Allow
                Action:
                  - pricing:GetProducts
                Resource: '*'
  
  # Lambda Function
  EC2SchedulerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EC2-Auto-Scheduler
      Description: Automatically start/stop EC2 instances based on tags and time with cost reporting
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt EC2SchedulerRole.Arn
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref EC2SchedulerTopic
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          from datetime import datetime

          # Initialize AWS clients
          ec2 = boto3.client('ec2')
          sns = boto3.client('sns')
          pricing = boto3.client('pricing', region_name='us-east-1')  # Pricing API only available in us-east-1

          # Get the SNS topic ARN from environment variable
          SNS_TOPIC_ARN = os.environ['SNS_TOPIC_ARN']

          # Tags configuration - instances with these tags will be managed
          TARGET_TAG_KEY = 'Environment'
          TARGET_TAG_VALUES = ['test', 'dev']
          
          # Cache for instance pricing to avoid repeated API calls
          instance_pricing_cache = {}

          def lambda_handler(event, context):
              # Determine if this is a start or stop operation based on the event
              action = event.get('action', '')
              
              if action not in ['start', 'stop']:
                  # Fallback to determine action based on current time
                  current_hour = datetime.now().hour
                  if 7 <= current_hour < 20:  # Between 7 AM and 8 PM
                      action = 'start'
                  else:
                      action = 'stop'
              
              # Find all instances with the specified tags
              instances = get_tagged_instances()
              
              if not instances:
                  message = f"No {', '.join(TARGET_TAG_VALUES)} instances found to {action}."
                  publish_sns_notification(f"EC2 Scheduler: No Action Taken", message)
                  return {
                      'statusCode': 200,
                      'body': json.dumps(message)
                  }
              
              # Perform the action on the instances
              instance_details = []
              
              for instance in instances:
                  instance_id = instance['InstanceId']
                  state = instance['State']['Name']
                  name_tag = next((tag['Value'] for tag in instance.get('Tags', []) if tag['Key'] == 'Name'), instance_id)
                  instance_type = instance.get('InstanceType', 'N/A')
                  
                  # Get additional instance details
                  instance_details.append({
                      'InstanceId': instance_id,
                      'Name': name_tag,
                      'Type': instance_type,
                      'PreviousState': state,
                      'Region': context.invoked_function_arn.split(':')[3]  # Extract region from Lambda ARN
                  })
                  
                  # Perform the requested action if instance is in appropriate state
                  try:
                      if action == 'stop' and state == 'running':
                          ec2.stop_instances(InstanceIds=[instance_id])
                          print(f"Stopping instance {name_tag} ({instance_id})")
                      elif action == 'start' and state == 'stopped':
                          ec2.start_instances(InstanceIds=[instance_id])
                          print(f"Starting instance {name_tag} ({instance_id})")
                  except Exception as e:
                      print(f"Error performing {action} on instance {instance_id}: {str(e)}")
              
              # Send notification with details
              if instance_details:
                  send_detailed_notification(action, instance_details)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps(f"Successfully processed {len(instance_details)} instances")
              }

          def get_tagged_instances():
              """Retrieve all EC2 instances with the target tags"""
              filters = [
                  {
                      'Name': f'tag:{TARGET_TAG_KEY}',
                      'Values': TARGET_TAG_VALUES
                  }
              ]
              
              response = ec2.describe_instances(Filters=filters)
              
              instances = []
              for reservation in response['Reservations']:
                  for instance in reservation['Instances']:
                      # We only care about running or stopped instances
                      if instance['State']['Name'] in ['running', 'stopped']:
                          instances.append(instance)
              
              return instances
              
          def get_instance_hourly_rate(instance_type, region):
              """Get the approximate hourly cost for an EC2 instance type"""
              # Check cache first
              cache_key = f"{region}-{instance_type}"
              if cache_key in instance_pricing_cache:
                  return instance_pricing_cache[cache_key]
              
              # Fallback to approximate pricing if API call fails
              approximate_pricing = {
                  't2.micro': 0.0116, 't2.small': 0.023, 't2.medium': 0.0464,
                  't3.micro': 0.0104, 't3.small': 0.0208, 't3.medium': 0.0416,
                  'm5.large': 0.096, 'm5.xlarge': 0.192, 'm5.2xlarge': 0.384,
                  'c5.large': 0.085, 'c5.xlarge': 0.17, 'c5.2xlarge': 0.34,
                  'r5.large': 0.126, 'r5.xlarge': 0.252, 'r5.2xlarge': 0.504
              }
              
              try:
                  # Try to get actual pricing from AWS Pricing API
                  response = pricing.get_products(
                      ServiceCode='AmazonEC2',
                      Filters=[
                          {'Type': 'TERM_MATCH', 'Field': 'instanceType', 'Value': instance_type},
                          {'Type': 'TERM_MATCH', 'Field': 'location', 'Value': get_region_name(region)},
                          {'Type': 'TERM_MATCH', 'Field': 'operatingSystem', 'Value': 'Linux'},
                          {'Type': 'TERM_MATCH', 'Field': 'tenancy', 'Value': 'Shared'},
                          {'Type': 'TERM_MATCH', 'Field': 'preInstalledSw', 'Value': 'NA'},
                          {'Type': 'TERM_MATCH', 'Field': 'capacitystatus', 'Value': 'Used'}
                      ],
                      MaxResults=10
                  )
                  
                  if response['PriceList']:
                      # Parse the price list JSON
                      price_data = json.loads(response['PriceList'][0])
                      terms = price_data.get('terms', {}).get('OnDemand', {})
                      if terms:
                          # Get the first price dimension
                          for term_id, term_data in terms.items():
                              price_dimensions = term_data.get('priceDimensions', {})
                              for dimension_id, dimension_data in price_dimensions.items():
                                  price_per_unit = dimension_data.get('pricePerUnit', {}).get('USD', '0')
                                  hourly_price = float(price_per_unit)
                                  # Cache the result
                                  instance_pricing_cache[cache_key] = hourly_price
                                  return hourly_price
              except Exception as e:
                  print(f"Error getting pricing for {instance_type}: {str(e)}")
              
              # Fallback to approximate pricing or default value
              hourly_price = approximate_pricing.get(instance_type, 0.05)  # Default to $0.05/hr if unknown
              instance_pricing_cache[cache_key] = hourly_price
              return hourly_price
              
          def get_region_name(region_code):
              """Map region code to region name for pricing API"""
              region_names = {
                  'us-east-1': 'US East (N. Virginia)',
                  'us-east-2': 'US East (Ohio)',
                  'us-west-1': 'US West (N. California)',
                  'us-west-2': 'US West (Oregon)',
                  'eu-west-1': 'EU (Ireland)',
                  'eu-west-2': 'EU (London)',
                  'eu-west-3': 'EU (Paris)',
                  'eu-central-1': 'EU (Frankfurt)',
                  'ap-northeast-1': 'Asia Pacific (Tokyo)',
                  'ap-northeast-2': 'Asia Pacific (Seoul)',
                  'ap-southeast-1': 'Asia Pacific (Singapore)',
                  'ap-southeast-2': 'Asia Pacific (Sydney)',
                  'ap-south-1': 'Asia Pacific (Mumbai)',
                  'sa-east-1': 'South America (Sao Paulo)',
                  'ca-central-1': 'Canada (Central)'
              }
              return region_names.get(region_code, 'US East (N. Virginia)')  # Default to us-east-1 if unknown

          def send_detailed_notification(action, instance_details):
              """Send a detailed SNS notification with instance information and cost estimation"""
              # Format the time for the message
              current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
              
              # Create a table of instances for the email
              instance_table = ""
              estimated_cost_impact = 0.0
              daily_hours = 11  # Assuming instances run 11 hours (7 AM to 8 PM)
              
              for instance in instance_details:
                  hourly_rate = get_instance_hourly_rate(instance['Type'], instance['Region'])
                  daily_cost = hourly_rate * daily_hours
                  
                  # Add cost impact based on the action
                  if action == 'stop' and instance['PreviousState'] == 'running':
                      # Money saved by stopping
                      estimated_cost_impact += daily_cost
                  elif action == 'start' and instance['PreviousState'] == 'stopped':
                      # Cost incurred by starting
                      estimated_cost_impact -= daily_cost
                      
                  instance_table += f"- {instance['Name']} ({instance['InstanceId']}): {instance['Type']} - " \
                                   f"Previous state: {instance['PreviousState']} - " \
                                   f"Approx. cost: ${hourly_rate:.4f}/hr (${daily_cost:.2f}/day)\n"
              
              # Count instances by previous state
              running_count = sum(1 for instance in instance_details if instance['PreviousState'] == 'running')
              stopped_count = sum(1 for instance in instance_details if instance['PreviousState'] == 'stopped')
              
              # Create the message subject and body
              action_present = 'stopping' if action == 'stop' else 'starting'
              action_past = 'stopped' if action == 'stop' else 'started'
              
              subject = f"EC2 Scheduler: {action_present.capitalize()} {len(instance_details)} {', '.join(TARGET_TAG_VALUES)} instances"
              
              # Format the cost impact message
              if action == 'stop':
                  cost_message = f"Estimated daily savings: ${estimated_cost_impact:.2f}"
              else:
                  cost_message = f"Estimated daily cost: ${abs(estimated_cost_impact):.2f}"
              
              message = f"""
          EC2 Scheduler Notification - {current_time}

          Action: {action.upper()} operation completed

          Summary:
          - Total instances processed: {len(instance_details)}
          - Previously running instances: {running_count}
          - Previously stopped instances: {stopped_count}
          - {cost_message}

          The following instances have been {action_past}:
          {instance_table}

          This is an automated message from your EC2 Scheduling Lambda function.
              """
              
              # Publish the notification
              publish_sns_notification(subject, message)

          def publish_sns_notification(subject, message):
              """Publish a notification to the SNS topic"""
              try:
                  sns.publish(
                      TopicArn=SNS_TOPIC_ARN,
                      Subject=subject,
                      Message=message
                  )
                  print(f"SNS notification sent: {subject}")
              except Exception as e:
                  print(f"Error sending SNS notification: {str(e)}")

  # EventBridge Rule for 8 PM shutdown
  EC2ShutdownScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: EC2-Shutdown-Schedule
      Description: Triggers Lambda function to shut down instances at 8 PM
      ScheduleExpression: cron(0 20 * * ? *)  # 8 PM every day
      State: ENABLED
      Targets:
        - Id: EC2ShutdownTarget
          Arn: !GetAtt EC2SchedulerFunction.Arn
          Input: '{"action": "stop"}'
  
  # EventBridge Rule for 7 AM startup
  EC2StartupScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: EC2-Startup-Schedule
      Description: Triggers Lambda function to start instances at 7 AM
      ScheduleExpression: cron(0 7 * * ? *)  # 7 AM every day
      State: ENABLED
      Targets:
        - Id: EC2StartupTarget
          Arn: !GetAtt EC2SchedulerFunction.Arn
          Input: '{"action": "start"}'
  
  # Lambda Permission for the Scheduler Rules
  EC2ShutdownPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EC2SchedulerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EC2ShutdownScheduleRule.Arn
  
  EC2StartupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EC2SchedulerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EC2StartupScheduleRule.Arn

Outputs:
  EC2SchedulerLambdaArn:
    Description: ARN of the EC2 Scheduler Lambda function
    Value: !GetAtt EC2SchedulerFunction.Arn
  
  EC2SchedulerSNSTopicArn:
    Description: ARN of the SNS topic for notifications
    Value: !Ref EC2SchedulerTopic